{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { setTimeout } from 'timers';\nimport { ACTION_WIDTH } from '../constants/actions';\nimport { TASK_PLAYER_DISTANCE_TRIGGER } from '../constants/task';\nimport { useGameState } from '../context/GameContext';\nimport { checkWithingBoundaries } from '../helpers/PointHelper';\nimport { TaskType } from '../definitions/task';\nimport useGameTask from './useGameTask';\nlet p5Instance;\nconst actions = [];\nexport default function useGameAction() {\n  const {\n    tasks,\n    completeTask\n  } = useGameTask();\n  const {\n    player,\n    actions: currentActions,\n    setActions,\n    setCurrentOverlay\n  } = useGameState();\n\n  const renderActions = () => {\n    actions.forEach(action => {\n      if (currentActions.find(item => item.name === action.name)) {\n        p5Instance.image(action.image, action.position.x, action.position.y, ACTION_WIDTH, ACTION_WIDTH);\n      }\n    });\n  };\n\n  const updateActions = () => {\n    const actionsCopy = currentActions;\n    const actionsCountObject = Object.values(TaskType).reduce((accum, key) => _objectSpread(_objectSpread({}, accum), {}, {\n      [key]: 0\n    }), {}); // eslint-disable-next-line @shopify/prefer-early-return\n\n    tasks.forEach(task => {\n      if (p5Instance.dist(task.position.x, task.position.y, player.position.x, player.position.y) <= TASK_PLAYER_DISTANCE_TRIGGER) {\n        const actionIndex = actionsCopy.findIndex(action => action.name === task.type);\n        const newAction = actions.find(action => {\n          return action.name === task.type;\n        });\n        newAction.payload = {\n          data: task,\n          type: task.type\n        };\n\n        if (actionIndex < 0) {\n          actionsCopy.push(newAction);\n        }\n\n        actionsCountObject[task.type]++;\n      }\n    }); // eslint-disable-next-line @shopify/prefer-early-return\n\n    Object.keys(actionsCountObject).forEach(key => {\n      if (actionsCountObject[key] === 0) {\n        const actionIndexToDelete = actionsCopy.findIndex(action => action.name === key);\n\n        if (actionIndexToDelete > -1) {\n          actionsCopy.splice(actionIndexToDelete, 1);\n        }\n      }\n    });\n    setActions(actionsCopy);\n  };\n\n  const preloadActions = p5 => {\n    p5Instance = p5;\n    Object.values(TaskType).forEach(type => {\n      const actionImage = p5.loadImage(`/actions/${type}.png`);\n      const action = {\n        name: type,\n        image: actionImage,\n        position: {\n          x: 0,\n          y: 0\n        },\n        payload: null\n      };\n      actions.push(action);\n    });\n  };\n\n  const setupActions = () => {\n    let nextY = p5Instance.height;\n    actions.forEach(action => {\n      action.position = {\n        x: p5Instance.width - action.image.width / 2,\n        y: nextY - action.image.height / 2\n      };\n      nextY = action.position.y;\n    });\n  };\n\n  const clickedActions = () => {\n    actions.forEach(action => {\n      if (!checkWithingBoundaries({\n        minX: action.position.x,\n        maxX: action.position.x + action.image.width,\n        minY: action.position.y,\n        maxY: action.position.y + action.image.height,\n        point: {\n          x: p5Instance.mouseX,\n          y: p5Instance.mouseY\n        }\n      }) || !currentActions.find(item => item.name === action.name)) {\n        return;\n      } // Kill specific\n\n\n      setCurrentOverlay({\n        name: action.name\n      }); // Task specific\n\n      completeTask(action.payload.data.id);\n      setTimeout(() => {\n        setCurrentOverlay(null);\n      }, 3000);\n    });\n  };\n\n  return {\n    renderActions,\n    updateActions,\n    preloadActions,\n    setupActions,\n    clickedActions\n  };\n}","map":{"version":3,"sources":["/Users/igorsilveira/Documents/Projects/lerna-among-us-clone/packages/app/hooks/useGameAction.ts"],"names":["setTimeout","ACTION_WIDTH","TASK_PLAYER_DISTANCE_TRIGGER","useGameState","checkWithingBoundaries","TaskType","useGameTask","p5Instance","actions","useGameAction","tasks","completeTask","player","currentActions","setActions","setCurrentOverlay","renderActions","forEach","action","find","item","name","image","position","x","y","updateActions","actionsCopy","actionsCountObject","Object","values","reduce","accum","key","task","dist","actionIndex","findIndex","type","newAction","payload","data","push","keys","actionIndexToDelete","splice","preloadActions","p5","actionImage","loadImage","setupActions","nextY","height","width","clickedActions","minX","maxX","minY","maxY","point","mouseX","mouseY","id"],"mappings":"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","sourcesContent":["import {setTimeout} from 'timers';\n\nimport * as p5Types from 'p5';\n\nimport {ACTION_WIDTH} from '../constants/actions';\nimport {TASK_PLAYER_DISTANCE_TRIGGER} from '../constants/task';\nimport {useGameState} from '../context/GameContext';\nimport {IAction} from '../definitions/action';\nimport {checkWithingBoundaries} from '../helpers/PointHelper';\nimport {ITask, TaskType} from '../definitions/task';\n\nimport useGameTask from './useGameTask';\n\nlet p5Instance: p5Types;\nconst actions: IAction[] = [];\n\nexport default function useGameAction() {\n  const {tasks, completeTask} = useGameTask();\n  const {player, actions: currentActions, setActions, setCurrentOverlay} = useGameState();\n\n  const renderActions = () => {\n    actions.forEach((action) => {\n      if (currentActions.find((item) => item.name === action.name)) {\n        p5Instance.image(\n          action.image,\n          action.position.x,\n          action.position.y,\n          ACTION_WIDTH,\n          ACTION_WIDTH,\n        );\n      }\n    });\n  };\n\n  const updateActions = () => {\n    const actionsCopy = currentActions;\n    const actionsCountObject = Object.values(TaskType)\n      .reduce((accum, key) => ({...accum, [key]: 0}), {});\n\n    // eslint-disable-next-line @shopify/prefer-early-return\n    tasks.forEach((task) => {\n      if (p5Instance.dist(\n        task.position.x,\n        task.position.y,\n        player.position.x,\n        player.position.y,\n        ) <= TASK_PLAYER_DISTANCE_TRIGGER) {\n        const actionIndex = actionsCopy\n          .findIndex((action) => action.name === task.type);\n\n        const newAction = actions.find((action) => {\n          return action.name === task.type;\n        });\n\n        newAction.payload = {\n          data: task,\n          type: task.type,\n        };\n\n        if (actionIndex < 0) {\n          actionsCopy.push(newAction);\n        }\n\n        actionsCountObject[task.type]++;\n      }\n    });\n\n    // eslint-disable-next-line @shopify/prefer-early-return\n    Object.keys(actionsCountObject).forEach((key) => {\n      if (actionsCountObject[key] === 0) {\n        const actionIndexToDelete = actionsCopy\n          .findIndex((action) => action.name === key);\n\n        if (actionIndexToDelete > -1) {\n          actionsCopy.splice(actionIndexToDelete, 1);\n        }\n      }\n    });\n\n    setActions(actionsCopy);\n  };\n\n  const preloadActions = (p5: p5Types) => {\n    p5Instance = p5;\n    Object.values(TaskType).forEach((type) => {\n      const actionImage = p5.loadImage(`/actions/${type}.png`);\n      const action: IAction = {\n        name: type,\n        image: actionImage,\n        position: {\n          x: 0,\n          y: 0,\n        },\n        payload: null,\n      };\n      actions.push(action);\n    });\n  };\n\n  const setupActions = () => {\n    let nextY = p5Instance.height;\n    actions.forEach((action) => {\n      action.position = {\n        x: p5Instance.width - action.image.width / 2,\n        y: nextY - action.image.height / 2,\n      };\n\n      nextY = action.position.y;\n    });\n  };\n\n  const clickedActions = () => {\n    actions.forEach((action) => {\n      if (!checkWithingBoundaries({\n        minX: action.position.x,\n        maxX: action.position.x + action.image.width,\n        minY: action.position.y,\n        maxY: action.position.y + action.image.height,\n        point: {\n          x: p5Instance.mouseX,\n          y: p5Instance.mouseY,\n        },\n      }) || !currentActions.find((item) => item.name === action.name)) {\n        return;\n      }\n\n      // Kill specific\n      setCurrentOverlay({\n        name: action.name,\n      });\n\n      // Task specific\n      completeTask((action.payload.data as ITask).id);\n\n      setTimeout(() => {\n        setCurrentOverlay(null);\n      }, 3000);\n    });\n  };\n\n  return {\n    renderActions,\n    updateActions,\n    preloadActions,\n    setupActions,\n    clickedActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}