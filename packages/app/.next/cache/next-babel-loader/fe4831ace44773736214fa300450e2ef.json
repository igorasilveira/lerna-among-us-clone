{"ast":null,"code":"import _defineProperty from \"/Users/igorsilveira/Documents/Projects/lerna-among-us-clone/packages/app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-mixed-operators */\nimport _ from 'lodash';\nimport { PLAYER_COLOR, PLAYER_RADIUS } from '../constants/player';\nimport { useGameState } from '../context/GameContext';\nimport { BLACK } from '../constants/colors';\nlet p5Instance;\nexport default function useGamePlayer() {\n  _s();\n\n  const {\n    player,\n    setPlayer,\n    map\n  } = useGameState();\n\n  const renderPlayer = () => {\n    p5Instance.fill(PLAYER_COLOR);\n    p5Instance.ellipse(p5Instance.width / 2, p5Instance.height / 2, PLAYER_RADIUS);\n  };\n\n  const updatePlayer = speed => {\n    const wallComparePosition = {\n      x: player.position.x + PLAYER_RADIUS / 2 * Math.sign(speed.x),\n      y: player.position.y + PLAYER_RADIUS / 2 * Math.sign(speed.y)\n    };\n\n    if (_.isEqual(map.walls.get(wallComparePosition.x, wallComparePosition.y), BLACK)) {\n      return;\n    }\n\n    setPlayer(_objectSpread(_objectSpread({}, player), {}, {\n      position: {\n        x: player.position.x + speed.x,\n        y: player.position.y + speed.y\n      }\n    }));\n  };\n\n  const setupPlayer = p5 => {\n    p5Instance = p5;\n  };\n\n  return {\n    setupPlayer,\n    renderPlayer,\n    updatePlayer\n  };\n}\n\n_s(useGamePlayer, \"Kt8rPt4tASWGyHqHAtpui8qDIQE=\", false, function () {\n  return [useGameState];\n});","map":{"version":3,"sources":["/Users/igorsilveira/Documents/Projects/lerna-among-us-clone/packages/app/hooks/useGamePlayer.ts"],"names":["_","PLAYER_COLOR","PLAYER_RADIUS","useGameState","BLACK","p5Instance","useGamePlayer","player","setPlayer","map","renderPlayer","fill","ellipse","width","height","updatePlayer","speed","wallComparePosition","x","position","Math","sign","y","isEqual","walls","get","setupPlayer","p5"],"mappings":";;;;;;;;AAAA;AAEA,OAAOA,CAAP,MAAc,QAAd;AAEA,SAAQC,YAAR,EAAsBC,aAAtB,QAAgE,qBAAhE;AACA,SAAQC,YAAR,QAA2B,wBAA3B;AACA,SAAQC,KAAR,QAAoB,qBAApB;AAGA,IAAIC,UAAJ;AAEA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AACtC,QAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA,SAAT;AAAoBC,IAAAA;AAApB,MAA2BN,YAAY,EAA7C;;AAEA,QAAMO,YAAY,GAAG,MAAM;AACzBL,IAAAA,UAAU,CAACM,IAAX,CAAgBV,YAAhB;AACAI,IAAAA,UAAU,CAACO,OAAX,CACEP,UAAU,CAACQ,KAAX,GAAmB,CADrB,EAEER,UAAU,CAACS,MAAX,GAAoB,CAFtB,EAGEZ,aAHF;AAKD,GAPD;;AASA,QAAMa,YAAY,GAAIC,KAAD,IAAmB;AACtC,UAAMC,mBAA2B,GAAG;AAClCC,MAAAA,CAAC,EAAEX,MAAM,CAACY,QAAP,CAAgBD,CAAhB,GAAoBhB,aAAa,GAAG,CAAhB,GAAoBkB,IAAI,CAACC,IAAL,CAAUL,KAAK,CAACE,CAAhB,CADT;AAElCI,MAAAA,CAAC,EAAEf,MAAM,CAACY,QAAP,CAAgBG,CAAhB,GAAoBpB,aAAa,GAAG,CAAhB,GAAoBkB,IAAI,CAACC,IAAL,CAAUL,KAAK,CAACM,CAAhB;AAFT,KAApC;;AAKA,QAAItB,CAAC,CAACuB,OAAF,CAAUd,GAAG,CAACe,KAAJ,CAAUC,GAAV,CAAcR,mBAAmB,CAACC,CAAlC,EAAqCD,mBAAmB,CAACK,CAAzD,CAAV,EAAuElB,KAAvE,CAAJ,EAAmF;AACjF;AACD;;AAEDI,IAAAA,SAAS,iCACJD,MADI;AAEPY,MAAAA,QAAQ,EAAE;AACRD,QAAAA,CAAC,EAAEX,MAAM,CAACY,QAAP,CAAgBD,CAAhB,GAAoBF,KAAK,CAACE,CADrB;AAERI,QAAAA,CAAC,EAAEf,MAAM,CAACY,QAAP,CAAgBG,CAAhB,GAAoBN,KAAK,CAACM;AAFrB;AAFH,OAAT;AAOD,GAjBD;;AAmBA,QAAMI,WAAW,GAAIC,EAAD,IAAiB;AACnCtB,IAAAA,UAAU,GAAGsB,EAAb;AACD,GAFD;;AAIA,SAAO;AACLD,IAAAA,WADK;AAELhB,IAAAA,YAFK;AAGLK,IAAAA;AAHK,GAAP;AAKD;;GAxCuBT,a;UACWH,Y","sourcesContent":["/* eslint-disable no-mixed-operators */\nimport * as p5Types from 'p5';\nimport _ from 'lodash';\n\nimport {PLAYER_COLOR, PLAYER_RADIUS, PLAYER_WALL_DISTANCE} from '../constants/player';\nimport {useGameState} from '../context/GameContext';\nimport {BLACK} from '../constants/colors';\nimport {IPoint} from '../definitions/global';\n\nlet p5Instance: p5Types;\n\nexport default function useGamePlayer() {\n  const {player, setPlayer, map} = useGameState();\n\n  const renderPlayer = () => {\n    p5Instance.fill(PLAYER_COLOR);\n    p5Instance.ellipse(\n      p5Instance.width / 2,\n      p5Instance.height / 2,\n      PLAYER_RADIUS,\n    );\n  };\n\n  const updatePlayer = (speed: IPoint) => {\n    const wallComparePosition: IPoint = {\n      x: player.position.x + PLAYER_RADIUS / 2 * Math.sign(speed.x),\n      y: player.position.y + PLAYER_RADIUS / 2 * Math.sign(speed.y),\n    };\n\n    if (_.isEqual(map.walls.get(wallComparePosition.x, wallComparePosition.y), BLACK)) {\n      return;\n    }\n\n    setPlayer({\n      ...player,\n      position: {\n        x: player.position.x + speed.x,\n        y: player.position.y + speed.y,\n      },\n    });\n  };\n\n  const setupPlayer = (p5: p5Types) => {\n    p5Instance = p5;\n  };\n\n  return {\n    setupPlayer,\n    renderPlayer,\n    updatePlayer,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}