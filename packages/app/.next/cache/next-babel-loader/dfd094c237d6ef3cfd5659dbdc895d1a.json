{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport tasksJSON from '../data/tasks.json';\nimport { useGameState } from '../context/GameContext';\nimport { TASK_COLOR, TASK_RADIUS } from '../constants/task';\nlet p5Instance;\nlet tasks = [];\nexport default function useGameTask() {\n  _s();\n\n  const {\n    player\n  } = useGameState();\n\n  const renderTasks = () => {\n    p5Instance.fill(TASK_COLOR);\n    tasks.forEach(task => {\n      const taskPosition = {\n        x: task.position.x - (-p5Instance.width / 2 + player.position.x),\n        y: task.position.y - (-p5Instance.height / 2 + player.position.y)\n      };\n      p5Instance.ellipse(taskPosition.x, taskPosition.y, TASK_RADIUS);\n    });\n  };\n\n  const updateTasks = () => {};\n\n  const completeTask = id => {\n    const completedTaskIndex = tasks.findIndex(task => task.id === id);\n    tasks.splice(completedTaskIndex, 1);\n  };\n\n  const setupTasks = p5 => {\n    p5Instance = p5;\n    tasks = tasksJSON;\n  };\n\n  return {\n    renderTasks,\n    updateTasks,\n    setupTasks,\n    tasks,\n    completeTask\n  };\n}\n\n_s(useGameTask, \"/p6LSUvwlsOeS6TDoXd8qJDakVY=\", false, function () {\n  return [useGameState];\n});","map":{"version":3,"sources":["/Users/igorsilveira/Documents/Projects/lerna-among-us-clone/packages/app/hooks/useGameTask.ts"],"names":["tasksJSON","useGameState","TASK_COLOR","TASK_RADIUS","p5Instance","tasks","useGameTask","player","renderTasks","fill","forEach","task","taskPosition","x","position","width","y","height","ellipse","updateTasks","completeTask","id","completedTaskIndex","findIndex","splice","setupTasks","p5"],"mappings":";;AAEA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,SAAQC,YAAR,QAA2B,wBAA3B;AAEA,SAAQC,UAAR,EAAoBC,WAApB,QAAsC,mBAAtC;AAEA,IAAIC,UAAJ;AACA,IAAIC,KAAc,GAAG,EAArB;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAM;AAACC,IAAAA;AAAD,MAAWN,YAAY,EAA7B;;AAEA,QAAMO,WAAW,GAAG,MAAM;AACxBJ,IAAAA,UAAU,CAACK,IAAX,CAAgBP,UAAhB;AACAG,IAAAA,KAAK,CAACK,OAAN,CAAeC,IAAD,IAAU;AACtB,YAAMC,YAAY,GAAG;AACnBC,QAAAA,CAAC,EAAEF,IAAI,CAACG,QAAL,CAAcD,CAAd,IAAmB,CAACT,UAAU,CAACW,KAAZ,GAAoB,CAApB,GAAwBR,MAAM,CAACO,QAAP,CAAgBD,CAA3D,CADgB;AAEnBG,QAAAA,CAAC,EAAEL,IAAI,CAACG,QAAL,CAAcE,CAAd,IAAmB,CAACZ,UAAU,CAACa,MAAZ,GAAqB,CAArB,GAAyBV,MAAM,CAACO,QAAP,CAAgBE,CAA5D;AAFgB,OAArB;AAIAZ,MAAAA,UAAU,CAACc,OAAX,CAAmBN,YAAY,CAACC,CAAhC,EAAmCD,YAAY,CAACI,CAAhD,EAAmDb,WAAnD;AACD,KAND;AAOD,GATD;;AAWA,QAAMgB,WAAW,GAAG,MAAM,CAEzB,CAFD;;AAIA,QAAMC,YAAY,GAAIC,EAAD,IAAsB;AACzC,UAAMC,kBAAkB,GAAGjB,KAAK,CAACkB,SAAN,CAAiBZ,IAAD,IAAUA,IAAI,CAACU,EAAL,KAAYA,EAAtC,CAA3B;AACAhB,IAAAA,KAAK,CAACmB,MAAN,CAAaF,kBAAb,EAAiC,CAAjC;AACD,GAHD;;AAKA,QAAMG,UAAU,GAAIC,EAAD,IAAiB;AAClCtB,IAAAA,UAAU,GAAGsB,EAAb;AACArB,IAAAA,KAAK,GAAGL,SAAR;AACD,GAHD;;AAKA,SAAO;AACLQ,IAAAA,WADK;AAELW,IAAAA,WAFK;AAGLM,IAAAA,UAHK;AAILpB,IAAAA,KAJK;AAKLe,IAAAA;AALK,GAAP;AAOD;;GAnCuBd,W;UACLL,Y","sourcesContent":["import * as p5Types from 'p5';\n\nimport tasksJSON from '../data/tasks.json';\nimport {useGameState} from '../context/GameContext';\nimport {ITask} from '../definitions/task';\nimport {TASK_COLOR, TASK_RADIUS} from '../constants/task';\n\nlet p5Instance: p5Types;\nlet tasks: ITask[] = [];\n\nexport default function useGameTask() {\n  const {player} = useGameState();\n\n  const renderTasks = () => {\n    p5Instance.fill(TASK_COLOR);\n    tasks.forEach((task) => {\n      const taskPosition = {\n        x: task.position.x - (-p5Instance.width / 2 + player.position.x),\n        y: task.position.y - (-p5Instance.height / 2 + player.position.y),\n      };\n      p5Instance.ellipse(taskPosition.x, taskPosition.y, TASK_RADIUS);\n    });\n  };\n\n  const updateTasks = () => {\n\n  };\n\n  const completeTask = (id: string): void => {\n    const completedTaskIndex = tasks.findIndex((task) => task.id === id);\n    tasks.splice(completedTaskIndex, 1);\n  };\n\n  const setupTasks = (p5: p5Types) => {\n    p5Instance = p5;\n    tasks = tasksJSON;\n  };\n\n  return {\n    renderTasks,\n    updateTasks,\n    setupTasks,\n    tasks,\n    completeTask,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}